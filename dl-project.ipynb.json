{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TO DO\n",
    "\n",
    "At the cell that starts with train_ds = RetinaDataset(pathTo250s, X_train, y_train), output image is really weird looking. Making sure the image is more human-interpretable on that cell might improve model score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(35126,\n",
       " [PosixPath('/home/ubuntu/data/train/23104_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/42184_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/23287_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/26100_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/18101_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/20499_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/7544_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/20255_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/19949_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/40220_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/25871_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/30058_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/33535_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/33531_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/40622_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/10988_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/20979_left.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/11182_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/760_right.jpeg'),\n",
       "  PosixPath('/home/ubuntu/data/train/4140_right.jpeg')])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline\n",
    "\n",
    "import math\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.optim as optim\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torchvision import models\n",
    "from pathlib import Path\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import metrics\n",
    "\n",
    "#!sudo pip3 install opencv-python\n",
    "import cv2\n",
    "\n",
    "\n",
    "\n",
    "PATH = Path(\"/home/ubuntu/data\")\n",
    "X = list((PATH/\"train\").iterdir())\n",
    "len(X), X[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Show an image and label here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Auxiliary Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#IMAGE OPERATIONS\n",
    "\n",
    "\n",
    "\n",
    "import math\n",
    "def crop(im, r, c, target_r, target_c): return im[r:r+target_r, c:c+target_c]\n",
    "\n",
    "def center_crop_square(im):\n",
    "    \"\"\" Returns a center crop of an image\"\"\"\n",
    "    r,c,*_ = im.shape\n",
    "    min_sz = min(r,c)\n",
    "    start_r = math.ceil((r-min_sz)/2)\n",
    "    start_c = math.ceil((c-min_sz)/2)\n",
    "    return crop(im, start_r, start_c, min_sz, min_sz)\n",
    "\n",
    "def get_a_crop(path, sz=250):\n",
    "    im = cv2.imread(str(path))\n",
    "    return cv2.resize(center_crop_square(im), (sz, sz))\n",
    "\n",
    "# random crop to the original size\n",
    "def random_crop(x, r_pix=8):\n",
    "    \"\"\" Returns a random crop\"\"\"\n",
    "    r, c,*_ = x.shape\n",
    "    r, c,*_ = x.shape\n",
    "    c_pix = round(r_pix*c/r)\n",
    "    rand_r = random.uniform(0, 1)\n",
    "    rand_c = random.uniform(0, 1)\n",
    "    start_r = np.floor(2*rand_r*r_pix).astype(int)\n",
    "    start_c = np.floor(2*rand_c*c_pix).astype(int)\n",
    "    return crop(x, start_r, start_c, r-2*r_pix, c-2*c_pix)\n",
    "\n",
    "def center_crop(x, r_pix=8):\n",
    "    r, c,*_ = x.shape\n",
    "    c_pix = round(r_pix*c/r)\n",
    "    return crop(x, r_pix, c_pix, r-2*r_pix, c-2*c_pix)\n",
    "\n",
    "\n",
    "def rotate_cv(im, deg, mode=cv2.BORDER_REFLECT, interpolation=cv2.INTER_AREA):\n",
    "    \"\"\" Rotates an image by deg degrees\"\"\"\n",
    "    r,c,*_ = im.shape\n",
    "    M = cv2.getRotationMatrix2D((c/2,r/2),deg,1)\n",
    "    return cv2.warpAffine(im,M,(c,r), borderMode=mode, \n",
    "                          flags=cv2.WARP_FILL_OUTLIERS+interpolation)\n",
    "\n",
    "def normalize(im):  #bunu zaten /255 işleminden geçmiş image'lara yapıyor.\n",
    "    \"\"\"Normalizes images with Imagenet stats.\"\"\"\n",
    "    imagenet_stats = np.array([[0.485, 0.456, 0.406], [0.229, 0.224, 0.225]])\n",
    "    return (im - imagenet_stats[0])/imagenet_stats[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resizing Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Create path for resized images given size such as dataset-450 or valid-250.'''\n",
    "\n",
    "def createResizedImagesFolder(pathToImages, pathToFolder, size):  #Takes str of PosixPath, returns PosixPath\n",
    "    pathToImages = Path(pathToImages)\n",
    "    Path(pathToFolder).mkdir(parents=True, exist_ok=True)\n",
    "    pathToFolder = Path(pathToFolder)\n",
    "    \n",
    "    if len(list(pathToFolder.iterdir())) == 0:  # Means we havent created any image in this folder yet\n",
    "        for p in pathToImages.iterdir():\n",
    "            img = get_a_crop(p, size)\n",
    "            fileName = str(p).split('/')[-1]\n",
    "            cv2.imwrite(str(pathToFolder/fileName), img)\n",
    "    else:  #Means we have been here before.\n",
    "        print(str(pathToFolder) + ' already exists. No images resized.')\n",
    "        \n",
    "    return pathToFolder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/data/images-250 already exists. No images resized.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[PosixPath('/home/ubuntu/data/images-250/23104_left.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/42184_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/23287_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/26100_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/18101_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/20499_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/7544_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/20255_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/19949_right.jpeg'),\n",
       " PosixPath('/home/ubuntu/data/images-250/40220_left.jpeg')]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pathTo250s = createResizedImagesFolder(PATH/'train', PATH/'images-250', 250)\n",
    "list(pathTo250s.iterdir())[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing X and y, train/valid split (Find a better name for this heading)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['10_left.jpeg',\n",
       "  '10_right.jpeg',\n",
       "  '13_left.jpeg',\n",
       "  '13_right.jpeg',\n",
       "  '15_left.jpeg',\n",
       "  '15_right.jpeg',\n",
       "  '16_left.jpeg',\n",
       "  '16_right.jpeg',\n",
       "  '17_left.jpeg',\n",
       "  '17_right.jpeg'],\n",
       " 35126)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#PATH/\"trainLabels.csv\"\n",
    "#X must consist of full names of images only.\n",
    "#path before filename will be added on RetinaDataset.\n",
    "df = pd.read_csv(PATH/\"trainLabels.csv\")\n",
    "X = list(df['image'])\n",
    "X = [filename + '.jpeg' for filename in X]\n",
    "X[:10], len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 0, 0, 0, 1, 2, 4, 4, 0, 1], 35126)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = list(df['level'])\n",
    "y[:10], len(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28100, 7026, 28100, 7026)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "#Beware, the line below returns pandas.Series objects. Convert them to lists first.\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=.2, random_state=0)\n",
    "X_train = list(X_train)\n",
    "X_valid = list(X_valid)\n",
    "y_train = list(y_train)\n",
    "y_valid = list(y_valid)\n",
    "\n",
    "#Checking out this line. It should look okay\n",
    "len(X_train), len(X_valid), len(y_train), len(y_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Print an image and label here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating Dataset / DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RetinaDataset(Dataset):\n",
    "    def __init__(self, path, X, y=None, transforms=False):\n",
    "        self.X = X\n",
    "        self.y = y  #Burada self.y=None yaptığından emin olman lazım çünkü if self.y case'leri mevcut.\n",
    "        self.transforms = transforms\n",
    "        self.path = path\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.y)\n",
    "\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        path = str(self.path) + \"/\" + str(self.X[idx])\n",
    "        x = cv2.imread(str(path)).astype(np.float32)\n",
    "        x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)/255\n",
    "        if self.transforms:  #Brings a random augmentation.\n",
    "            rdeg = (np.random.random()-.50)*20\n",
    "            x = rotate_cv(x, rdeg)\n",
    "            x = random_crop(x)\n",
    "            if np.random.random() > 0.5: x = np.fliplr(x).copy()\n",
    "        else:  #Here, she center crops. However, don't do that for the fishes. You'll lose your fish.\n",
    "            x = center_crop(x)\n",
    "        x = normalize(x)\n",
    "        \n",
    "        if self.y:\n",
    "            return np.rollaxis(x, 2), self.y[idx]\n",
    "        else:\n",
    "            return np.rollaxis(x, 2)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 234, 234)\n",
      "1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fcbc0e890b8>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_ds = RetinaDataset(pathTo250s, X_train, y_train)\n",
    "valid_ds = RetinaDataset(pathTo250s, X_valid, y_valid)\n",
    "\n",
    "#Check if Dataset works properly\n",
    "x, y = train_ds[np.random.randint(len(train_ds))]\n",
    "print(x.shape), print(y)\n",
    "plt.imshow(np.rollaxis(np.rollaxis(x, 2), 2), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28100, 7026)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_ds), len(valid_ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "bs = 64\n",
    "train_dl = DataLoader(train_ds, batch_size=bs, shuffle=True)\n",
    "valid_dl = DataLoader(valid_ds, batch_size=bs)\n",
    "CUDA_LAUNCH_BLOCKING=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([64, 3, 234, 234]), torch.Size([64]))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y = next(iter(train_dl))\n",
    "x = x.cuda().float()\n",
    "y = y.cuda().float()\n",
    "x.shape, y.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "resnet = models.resnet34(pretrained=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[AdaptiveAvgPool2d(output_size=(1, 1)),\n",
       " Linear(in_features=512, out_features=1000, bias=True)]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "layers = list(resnet.children())\n",
    "print(len(layers))\n",
    "layers[-2:]  #Last two layers out of 10 layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This model will be right after the 8th layer of resnet.\n",
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        resnet = models.resnet34(pretrained=True)\n",
    "        # freezing parameters\n",
    "        for param in resnet.parameters():  #resnet.parameters() is a generator object.\n",
    "            param.requires_grad = False\n",
    "        # convolutional layers of resnet34\n",
    "        layers = list(resnet.children())[:8]\n",
    "        #burada top modeldan kasti image'a yakin olan taraf.\n",
    "        self.top_model = nn.Sequential(*layers).cuda()\n",
    "        self.fc = nn.Linear(512, 5)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.top_model(x))\n",
    "        x = nn.AdaptiveAvgPool2d((1,1))(x)\n",
    "        x = x.view(x.size(0), -1) # flattening \n",
    "        x = self.fc(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Net().cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([64, 3, 234, 234]), torch.Size([64]), torch.Tensor, torch.Tensor)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y = next(iter(train_dl))\n",
    "x = x.cuda().float()\n",
    "y = y.cuda().float()\n",
    "x.shape, y.shape, type(x), type(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## val_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "def val_metrics(model, valid_dl, explanatoryMetrics=True):\n",
    "    model.eval()\n",
    "    \n",
    "    #add more metrics here.\n",
    "    #Do the 1x overestimation 1x underestimation ,2x over etc etc...\n",
    "    total = 0\n",
    "    sum_loss = 0\n",
    "    correct = 0\n",
    "    \n",
    "    labels = []\n",
    "    preds = []\n",
    "    \n",
    "    for x, y in valid_dl:\n",
    "        x = x.cuda().float()\n",
    "        y = y.cuda()  #bunu .unsqueeze(1) yaptigin an error veriyor.\n",
    "        out = model(x)  #Here, out has a shape of bs x 5. Gotta convert that into one variable.\n",
    "        \n",
    "        _, pred = torch.max(out, 1)\n",
    "        correct += pred.eq(y).sum().item()\n",
    "        #if above doesnt work use this line\n",
    "        #correct += pred.eq(y.data).sum().item()\n",
    "        loss = F.cross_entropy(out, y)\n",
    "        \n",
    "        #labels.append(list(y.detach().cpu().numpy()))\n",
    "        #preds.append(list(pred.detach().cpu().numpy()))\n",
    "        \n",
    "        labels += list(y.detach().cpu().numpy())\n",
    "        preds += list(pred.detach().cpu().numpy())\n",
    "        \n",
    "        batch = y.shape[0]\n",
    "        sum_loss += batch*(loss.item())\n",
    "        total += batch\n",
    "        \n",
    "    \n",
    "    #Get Quadratic Kappa\n",
    "    qkappa = metrics.cohen_kappa_score(labels,\n",
    "                                   preds,\n",
    "                                   weights=\"quadratic\")\n",
    "    \n",
    "    #Get Explanatory Metrics\n",
    "    #predDifferences = preds-labels\n",
    "    \n",
    "    return sum_loss/total, correct/total, qkappa #Returns loss, accuracy, quadratic weighted kappa\n",
    "    #Also return quadratic weighted kappa here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 0]\n",
      "[1, 1, 1]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(2.0065630698794488, 0.0677483632223171, 0.0005831640416987804)"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_metrics(model, valid_dl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7026"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learning Rate Finder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here, what filter does is that, he runs the lambda function for each element in model.paramterers()\n",
    "#If it turns out true, it gets into the parameters variable.\n",
    "#In other words, parameters has the non-frozen parameters only.\n",
    "def get_optimizer(model, lr = 0.01, wd = 0.0):  #Brings non-frozen parameters.\n",
    "    parameters = filter(lambda p: p.requires_grad, model.parameters())\n",
    "    optim = torch.optim.Adam(parameters, lr=lr, weight_decay=wd)\n",
    "    return optim\n",
    "\n",
    "def update_optimizer(optimizer, lr):  #Updates the learning rate.\n",
    "    for i, param_group in enumerate(optimizer.param_groups):\n",
    "        param_group[\"lr\"] = lr\n",
    "        \n",
    "def save_model(m, p): torch.save(m.state_dict(), p)\n",
    "    \n",
    "def load_model(m, p): m.load_state_dict(torch.load(p))\n",
    "    \n",
    "#Here, this guy increases learning rate bit by bit. Outputs a graph of loss function.\n",
    "#In the graph, loss function will go down until a point where it will start to go crazy up and down.\n",
    "#In other words, after a value of learning rate, it won't be able to converge. It'll go crazy.\n",
    "#You want to pick a learning rate before that point.\n",
    "#So that you can converge smoothly.\n",
    "#You keep updating the parameters of your model. However, you change learning rate every iteration.\n",
    "#number of iterations: number of epochs * batch size\n",
    "def LR_range_finder(model, train_dl, lr_low=1e-5, lr_high=0.1, epochs=2):\n",
    "    losses = []\n",
    "    p = PATH/\"mode_tmp.pth\"\n",
    "    save_model(model, str(p))\n",
    "    iterations = epochs * len(train_dl)\n",
    "    delta = (lr_high - lr_low)/iterations\n",
    "    lrs = [lr_low + i*delta for i in range(iterations)]\n",
    "    model.train()\n",
    "    ind = 0\n",
    "    optimizer = get_optimizer(model, lr = lrs[0], wd = 0.0)\n",
    "    for i in range(epochs):\n",
    "        for x,y in train_dl:\n",
    "            update_optimizer(optimizer, lr=lrs[ind])\n",
    "            x = x.cuda().float()\n",
    "            y = y.cuda()\n",
    "            out = model(x)\n",
    "            loss = F.cross_entropy(out, y)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            \n",
    "            losses.append(loss.item())\n",
    "            ind +=1\n",
    "            \n",
    "    load_model(model, str(p))\n",
    "    return lrs, losses \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Net().cuda()  #Bu line ile sanirim modelini GPU'da initialize ediyorsun.\n",
    "lrs, losses = LR_range_finder(model, train_dl, lr_low=1e-10, lr_high=1e-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lrs[:200], losses[:200])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(model, epochs=5, learning_rate=0.01):\n",
    "    optimizer = get_optimizer(model, lr = learning_rate, wd =0)\n",
    "    for i in range(epochs):\n",
    "        model.train()  #Do this here because in val_metrics, model.eval() runs.\n",
    "        total = 0\n",
    "        sum_loss = 0\n",
    "        for x, y in train_dl:\n",
    "            x = x.cuda().float()\n",
    "            y = y.cuda()\n",
    "            out = model(x)\n",
    "            \n",
    "            loss = F.cross_entropy(out, y)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            \n",
    "            batch = y.shape[0]\n",
    "            total += batch\n",
    "            sum_loss += batch*(loss.item())\n",
    "            \n",
    "        val_loss, val_acc, val_kappa = val_metrics(model, valid_dl)  #Her bir epoch'da validation set ile test ediyorsun.\n",
    "        print(\"train loss %.3f val loss %.3f val accuracy %.3f val kappa %.3f\" % (sum_loss/total, val_loss, val_acc, val_kappa))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 0]\n",
      "[0, 0, 3]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.935 val loss 1.042 val accuracy 0.623 val kappa 0.329\n",
      "[0, 2, 0]\n",
      "[0, 0, 2]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.872 val loss 0.913 val accuracy 0.681 val kappa 0.381\n",
      "[0, 2, 0]\n",
      "[0, 0, 2]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.865 val loss 1.040 val accuracy 0.605 val kappa 0.295\n",
      "[0, 2, 0]\n",
      "[0, 0, 2]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.876 val loss 0.963 val accuracy 0.622 val kappa 0.329\n",
      "[0, 2, 0]\n",
      "[0, 0, 2]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.907 val loss 0.911 val accuracy 0.709 val kappa 0.366\n"
     ]
    }
   ],
   "source": [
    "model = Net().cuda()\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 0]\n",
      "[0, 0, 2]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9108756109584338, 0.7090805579276971, 0.36617075551337064)"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_metrics(model, valid_dl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "#modelin parametrelerini True ya da False yapiyorsun. Tüm parametreleri ama.\n",
    "#O yüzden bunu modelin bir kısmını seçip run ediyorsun.\n",
    "#Mesela Sequential modelin birkaç layerını seçip kullanabilirsin.\n",
    "#a layer is a model too, I think\n",
    "def set_trainable_attr(m, b=True):  #b=True yani it unfreezes by default.\n",
    "    for p in m.parameters(): p.requires_grad = b\n",
    "        \n",
    "def unfreeze(model, l):\n",
    "    top_model = model.top_model\n",
    "    set_trainable_attr(top_model[l])  #Mesela top_model içinde layerler olan bir list. İstediğin layerı unfreeze et.\n",
    "    \n",
    "#Zaten 8 layer var. 7 ve 6. indexdekiler en sonuncuları.\n",
    "unfreeze(model, 7)\n",
    "unfreeze(model, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 0]\n",
      "[0, 0, 0]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.750 val loss 0.727 val accuracy 0.772 val kappa 0.498\n",
      "[0, 2, 0]\n",
      "[0, 0, 0]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.587 val loss 0.692 val accuracy 0.765 val kappa 0.523\n",
      "[0, 2, 0]\n",
      "[0, 0, 1]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.433 val loss 0.773 val accuracy 0.752 val kappa 0.546\n",
      "[0, 2, 0]\n",
      "[0, 0, 1]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.243 val loss 0.984 val accuracy 0.733 val kappa 0.577\n",
      "[0, 2, 0]\n",
      "[0, 0, 1]\n",
      "50\n",
      "7026\n",
      "7026\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "7026\n",
      "train loss 0.150 val loss 1.054 val accuracy 0.725 val kappa 0.557\n"
     ]
    }
   ],
   "source": [
    "# lower learning rate\n",
    "# 5 posta daha train ediyorum. Bu sefer layerlarin birazini unfreeze ederek.\n",
    "# val loss iyice azaliyor gibi.\n",
    "train(model, epochs=5, learning_rate=0.0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Very Bottom Part of this doc is for testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Net().cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = next(iter(train_dl))\n",
    "x = x.cuda().float()\n",
    "y = y.cuda().float()\n",
    "x.shape, y.shape, type(x), type(y)\n",
    "out = model(x)\n",
    "_, pred = torch.max(out, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1,\n",
       "        1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "        1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1], device='cuda:0')"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-8.2738e-01,  4.3935e-01, -2.0654e-01, -4.9658e-01, -1.0522e+00],\n",
       "        [-7.5172e-01,  3.5475e-01, -3.7029e-01, -4.8058e-01, -9.9944e-01],\n",
       "        [-7.9705e-01,  3.6043e-01,  1.8179e-01, -4.9183e-01, -1.0892e+00],\n",
       "        [-1.0630e+00,  1.2893e+00, -6.7064e-01, -5.8770e-01, -8.9687e-01],\n",
       "        [-7.2993e-01,  1.2086e+00, -3.8347e-01, -5.4394e-01, -7.4223e-01],\n",
       "        [-1.1183e+00,  8.1864e-01, -5.8624e-01, -1.1010e+00, -1.5238e+00],\n",
       "        [-7.5229e-01, -1.3334e-03, -5.8160e-01, -3.6901e-01, -4.0382e-01],\n",
       "        [-5.9850e-01,  5.9732e-01, -3.2639e-01,  8.1230e-02, -1.0396e+00],\n",
       "        [-1.5461e+00,  4.9414e-01, -7.9799e-01, -2.6335e-01, -1.2811e+00],\n",
       "        [-1.1934e+00,  1.8424e-02, -1.2202e-03,  3.2946e-03, -1.0564e+00],\n",
       "        [-1.5891e+00,  2.3360e-01, -6.2440e-01, -9.7288e-02, -1.0854e+00],\n",
       "        [-5.5202e-01,  4.8498e-01, -5.0822e-01, -2.5746e-01, -9.5653e-01],\n",
       "        [-1.2583e+00,  4.1151e-01, -5.7392e-01,  3.3230e-01, -1.8313e+00],\n",
       "        [-8.4040e-01,  8.5225e-01, -1.4356e-01, -2.2183e-01, -1.0906e+00],\n",
       "        [-6.7821e-01,  8.7040e-02, -3.5938e-01, -1.3500e-01, -1.1800e+00],\n",
       "        [-1.0634e+00,  2.5160e-01, -5.6179e-01,  3.6358e-01, -1.9185e+00],\n",
       "        [-8.4403e-01,  3.5880e-01,  3.2787e-01, -4.8968e-01,  4.4618e-02],\n",
       "        [-8.8410e-01,  3.5345e-01, -2.8962e-01, -4.7662e-01, -1.0028e+00],\n",
       "        [-9.8591e-01,  1.3375e+00, -3.9628e-01,  3.3284e-02, -4.8958e-01],\n",
       "        [-1.2160e+00,  9.3370e-01, -5.8303e-02, -6.3288e-01, -9.3268e-01],\n",
       "        [-7.4207e-01,  9.0175e-01, -4.7104e-01, -6.9038e-01, -5.9087e-01],\n",
       "        [-3.8082e-01, -9.1117e-02, -2.7263e-01, -6.6979e-02, -1.4754e+00],\n",
       "        [-6.0674e-01,  6.1013e-01,  2.2982e-01, -5.9489e-01, -1.2924e+00],\n",
       "        [-9.5783e-01,  6.3934e-01, -3.1961e-01,  2.0024e-01, -1.2473e+00],\n",
       "        [-5.5297e-01,  1.1540e+00, -4.7352e-01, -3.9150e-01, -8.7231e-01],\n",
       "        [-1.0209e+00,  1.0677e+00, -8.0425e-01, -5.5663e-01, -7.9475e-01],\n",
       "        [-1.1707e+00,  5.5267e-01, -7.1643e-01, -3.9887e-01, -9.9507e-01],\n",
       "        [-9.3106e-01,  2.1695e+00, -3.9223e-01, -8.9240e-01, -5.9300e-01],\n",
       "        [-1.1194e+00,  8.8684e-01, -4.2599e-01, -1.3354e+00, -8.0845e-01],\n",
       "        [-1.2544e+00,  3.6654e-01, -2.0603e-01, -6.3600e-01, -7.7018e-01],\n",
       "        [-1.3344e+00,  3.8315e-01, -5.9196e-01, -3.8791e-01, -9.9269e-01],\n",
       "        [-1.1124e+00,  9.3911e-01, -7.6295e-01,  1.2384e-01, -1.6678e+00],\n",
       "        [-4.2140e-01,  1.1150e+00, -1.1682e-01,  2.0888e-01, -8.5319e-01],\n",
       "        [-8.9023e-01,  2.2000e-01, -6.6949e-01,  4.2543e-01, -1.1033e+00],\n",
       "        [-9.0739e-01,  3.4695e-01, -1.1031e+00,  2.0419e-01, -1.1963e+00],\n",
       "        [-9.8550e-01,  4.7432e-01, -5.2244e-01,  1.6976e-02, -8.4142e-01],\n",
       "        [-1.1602e+00,  5.3780e-01, -1.1989e-01,  1.7163e-02, -1.6733e+00],\n",
       "        [-9.0378e-01,  6.7437e-01, -3.5012e-01, -5.4585e-02, -7.0163e-01],\n",
       "        [-6.7531e-01,  1.5756e+00, -6.7022e-01, -4.1186e-01, -1.1764e+00],\n",
       "        [-1.4181e+00,  5.7813e-01, -4.8334e-01, -1.2755e-01, -2.9446e-01],\n",
       "        [-1.0398e+00,  1.0167e+00, -2.9493e-01, -4.6887e-01, -1.3058e+00],\n",
       "        [-9.6371e-01,  5.0497e-01, -1.1680e+00, -1.1721e-01, -1.4532e+00],\n",
       "        [-1.3085e+00,  1.4001e+00,  4.1654e-02, -1.0317e+00, -1.1993e+00],\n",
       "        [-1.2604e+00,  3.9723e-01, -2.5038e-01, -4.0408e-01, -1.2813e+00],\n",
       "        [-5.2197e-01,  4.5092e-01,  4.1342e-01, -3.1648e-01, -4.2069e-01],\n",
       "        [-1.1500e+00,  3.4631e-01, -5.4189e-01, -3.2815e-01, -1.1007e+00],\n",
       "        [-6.2021e-01,  6.4412e-01, -4.3039e-01, -1.1190e+00, -8.4726e-01],\n",
       "        [-6.5741e-01,  6.3153e-01, -6.7477e-02, -2.7359e-01, -8.7321e-01],\n",
       "        [-6.9815e-01,  7.5102e-01,  1.6397e-01,  5.4850e-01, -1.1840e+00],\n",
       "        [-7.8365e-01,  1.1746e+00, -8.9644e-03, -6.4958e-01, -1.8041e+00],\n",
       "        [-1.1415e+00,  1.2405e+00, -3.7043e-01, -9.3701e-01, -9.0754e-01],\n",
       "        [-1.1730e+00,  6.0087e-01,  1.6113e-02, -6.8910e-01, -1.8905e+00],\n",
       "        [-5.3200e-01,  5.5951e-01, -2.0247e-01, -1.6922e-01, -7.1141e-01],\n",
       "        [-7.9262e-01,  1.0460e+00, -1.3838e-02, -3.9546e-01, -1.7911e+00],\n",
       "        [-6.9411e-01,  1.0378e+00, -7.2988e-01, -3.6028e-01, -1.2056e+00],\n",
       "        [-7.4965e-01,  6.6636e-01,  1.0630e-01, -2.9428e-01, -9.9605e-01],\n",
       "        [-9.4345e-01,  9.2257e-01,  1.0993e-01, -2.7700e-01, -1.3721e+00],\n",
       "        [-1.1421e+00,  6.9604e-02, -8.1920e-01,  1.8953e-01, -1.9437e+00],\n",
       "        [-9.6402e-01,  4.8535e-01, -3.4182e-01, -1.6604e-01, -1.2623e+00],\n",
       "        [-3.8381e-01,  4.3712e-01,  3.0331e-01, -7.4898e-01, -6.1091e-01],\n",
       "        [-1.0902e+00,  7.9146e-01, -2.7056e-01,  8.1703e-01, -1.3677e+00],\n",
       "        [-1.2358e+00,  2.3999e-01, -9.0350e-01, -4.4172e-01, -1.3901e+00],\n",
       "        [-7.4451e-01,  8.5697e-01, -1.0138e-01, -2.0317e-01, -5.7757e-01],\n",
       "        [-1.0713e+00,  6.2292e-01, -6.6916e-02, -2.5528e-01, -8.7506e-01]],\n",
       "       device='cuda:0', grad_fn=<AddmmBackward>)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 4., 0., 0., 0., 0., 2., 0., 0.,\n",
       "        0., 2., 0., 0., 0., 3., 2., 0., 2., 2., 0., 0., 0., 3., 2., 2., 0., 1.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 2., 1., 0., 2., 0., 2., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 2., 0., 2., 0., 0.], device='cuda:0')"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "qkappa = metrics.cohen_kappa_score(y.detach().cpu().numpy(),\n",
    "                                   pred.detach().cpu().numpy(),\n",
    "                                   weights=\"quadratic\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03961584633853543"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qkappa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'view'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-205-bd0d4971e7f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#list(np.vstack(anan).reshape(-1))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0manan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'view'"
     ]
    }
   ],
   "source": [
    "anan = [[1, 2, 3], [3, 4, 5], [6, 7]]\n",
    "anan\n",
    "\n",
    "#list(np.vstack(anan).reshape(-1))\n",
    "anan.view(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(np.vstack(anan))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
